#!/usr/bin/env bash

set -e

# This script gets packaged with the release and should do the bulk of the setup work. This allows this setup to be tied
# to a specific release of the code, and guarantees it will never run along-side newer or older binaries.

# some distros don't have systemd enabled by default, check this first
if [[ $(ps -p 1 -o comm=) != "systemd" ]]; then
  echo "systemd is required for this installation. Please enable it, then retry."
  exit 1
fi

USER=${SUDO_USER:-$USER}
USER_HOME=$(getent passwd $USER | cut -d: -f6)
UA_EVENT_NAME="install"

if [ -z "$XDG_DATA_HOME" ]; then
  XDG_DATA_HOME="$USER_HOME/.local/share"
fi
DATA_DIR="$XDG_DATA_HOME/xr_driver"
if [ ! -d "$DATA_DIR" ]; then
  mkdir -p $DATA_DIR
fi

if [ -z "$XDG_CONFIG_HOME" ]; then
  XDG_CONFIG_HOME="$USER_HOME/.config"
fi
CONFIG_DIR="$XDG_CONFIG_HOME/xr_driver"
if [ ! -d "$CONFIG_DIR" ]; then
  mkdir -p $CONFIG_DIR
fi

if [ -z "$XDG_BIN_HOME" ]; then
  XDG_BIN_HOME="$USER_HOME/.local/bin"
fi
BIN_DIR="$XDG_BIN_HOME"
if [ ! -d "$BIN_DIR" ]; then
  mkdir -p $BIN_DIR
fi

if [ -z "$XDG_STATE_HOME" ]; then
  XDG_STATE_HOME="$USER_HOME/.local/state"
fi
STATE_DIR="$XDG_STATE_HOME/xr_driver"
if [ ! -d "$STATE_DIR" ]; then
  mkdir -p $STATE_DIR
fi

if [ -e "$USER_HOME/bin/xreal_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $USER_HOME/bin/xreal_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

if [ -e "$BIN_DIR/xr_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $BIN_DIR/xr_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

UA_CLIENT_ID="ARLinuxDriver"
UA_EVENT_VERSION="$1"
#INJECT_UA_CALL

echo "Copying shared libraries to ${DATA_DIR}/lib"
mkdir -p $DATA_DIR/lib
cp lib/* "$DATA_DIR/lib"

if [ -e "$USER_HOME/.xreal_driver_config" ]; then
  echo "Migrating config file to ${CONFIG_DIR}/config.ini"
  mv $USER_HOME/.xreal_driver_config $CONFIG_DIR/config.ini
fi

if [ -e "$USER_HOME/.xreal_driver_log" ]; then
  echo "Migrating log file to ${STATE_DIR}/driver.log"
  mv $USER_HOME/.xreal_driver_log ${STATE_DIR}/driver.log
fi

if ! lsmod | grep -q uinput; then
  echo "Setting up uinput kernel module"
  modprobe uinput
fi

echo "Copying driver binary and scripts to ${BIN_DIR}"
if [ ! -d "$BIN_DIR" ]; then
  mkdir $BIN_DIR
fi
cp xrDriver $BIN_DIR
cp xr_driver_cli $BIN_DIR
cp xr_driver_uninstall $BIN_DIR

# escaping sed replace: https://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern
ESCAPED_USER_HOME=$(printf '%s\n' "$USER_HOME" | sed -e 's/[\/&]/\\&/g')

echo "Copying the verification script and manifest to ${USER_HOME}/.local/bin/xr_driver"
sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" verify_installation
if [ ! -d "$USER_HOME/.local/bin/xr_driver" ]; then
  mkdir -p $USER_HOME/.local/bin/xr_driver
fi
cp -p verify_installation $USER_HOME/.local/bin/xr_driver
cp manifest $USER_HOME/.local/bin/xr_driver

echo "Setting up the systemd service"
# check if the systemd service is already running from a previous install
if systemctl is-active --quiet xr-driver; then
  systemctl stop xr-driver
fi

ESCAPED_LD_LIBRARY_PATH=$(printf '%s\n' "$DATA_DIR/lib" | sed -e 's/[\/&]/\\&/g')
ESCAPED_BIN_DIR=$(printf '%s\n' "$BIN_DIR" | sed -e 's/[\/&]/\\&/g')
sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" \
  -e "s/{user}/$USER/g" \
  -e "s/{ld_library_path}/$ESCAPED_LD_LIBRARY_PATH/g" \
  -e "s/{bin_dir}/$ESCAPED_BIN_DIR/g" systemd/xr-driver.service
cp systemd/xr-driver.service /etc/systemd/system
chmod 644 /etc/systemd/system/xr-driver.service
systemctl daemon-reload
systemctl start xr-driver

# check if systemd startup was successful
if ! systemctl is-active --quiet xr-driver; then
  echo "systemd startup failed"
  exit 1
fi

# set it to run on startup
systemctl enable xr-driver