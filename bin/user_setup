#!/usr/bin/env bash

set -e

# this part of the setup should be run as the user, not root
if [ "$(id -u)" == "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

GROUP=$(id -gn $USER)
USER_HOME=$(getent passwd $USER | cut -d: -f6)
UA_EVENT_NAME="install"

if [ -z "$XDG_DATA_HOME" ]; then
  XDG_DATA_HOME="$USER_HOME/.local/share"
fi
SYSTEMD_DATA_DIR="$XDG_DATA_HOME/systemd"
SYSTEMD_USER_DIR="$SYSTEMD_DATA_DIR/user"
if [ ! -d "$SYSTEMD_USER_DIR" ]; then
  mkdir -p $SYSTEMD_USER_DIR
fi
DATA_DIR="$XDG_DATA_HOME/xr_driver"
if [ ! -d "$DATA_DIR" ]; then
  mkdir -p $DATA_DIR
fi

if [ -z "$XDG_CONFIG_HOME" ]; then
  XDG_CONFIG_HOME="$USER_HOME/.config"
fi
UDEV_CONFIG_DIR=$XDG_CONFIG_HOME/udev
UDEV_RULES_DIR=$UDEV_CONFIG_DIR/rules.d
if [ ! -d "$UDEV_RULES_DIR" ]; then
  mkdir -p $UDEV_RULES_DIR
fi

CONFIG_DIR="$XDG_CONFIG_HOME/xr_driver"
if [ ! -d "$CONFIG_DIR" ]; then
  mkdir -p $CONFIG_DIR
fi

if [ -z "$XDG_BIN_HOME" ]; then
  XDG_BIN_HOME="$USER_HOME/.local/bin"
fi
OLD_BIN_DIR="$USER_HOME/bin"
if [ ! -d "$OLD_BIN_DIR" ]; then
  mkdir -p $OLD_BIN_DIR
fi
BIN_DIR="$XDG_BIN_HOME"
if [ ! -d "$BIN_DIR" ]; then
  mkdir -p $BIN_DIR
fi

if [ -z "$XDG_STATE_HOME" ]; then
  XDG_STATE_HOME="$USER_HOME/.local/state"
fi
STATE_DIR="$XDG_STATE_HOME/xr_driver"
if [ ! -d "$STATE_DIR" ]; then
  mkdir -p $STATE_DIR
fi

if [ -e "$USER_HOME/bin/xreal_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $USER_HOME/bin/xreal_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

if [ -e "$BIN_DIR/xr_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $BIN_DIR/xr_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

UA_CLIENT_ID="ARLinuxDriver"
UA_EVENT_VERSION="$1"
#INJECT_UA_CALL

echo "Copying shared libraries to ${DATA_DIR}/lib"
mkdir -p $DATA_DIR/lib
cp lib/* "$DATA_DIR/lib" 2>/dev/null || true

if [ -e "$USER_HOME/.xreal_driver_config" ]; then
  echo "Migrating config file to ${CONFIG_DIR}/config.ini"
  mv $USER_HOME/.xreal_driver_config $CONFIG_DIR/config.ini
fi

if [ -e "$USER_HOME/.xreal_driver_log" ]; then
  echo "Migrating log file to ${STATE_DIR}/driver.log"
  mv $USER_HOME/.xreal_driver_log ${STATE_DIR}/driver.log
fi

if [ -e "/var/lib/xr_driver/device_license" ]; then
  echo "Migrating device license to ${STATE_DIR}/license.json"
  pushd /var/lib/xr_driver

  # since the file has root ownership, rename it before moving to a user directory
  mv "device_license" "license.json"
  mv "license.json" "${STATE_DIR}/license.json"

  popd
fi

if ! lsmod | grep -q uinput; then
  echo "Setting up uinput kernel module"
  modprobe uinput
fi

# escaping sed replace: https://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern
ESCAPED_USER_HOME=$(printf '%s\n' "$USER_HOME" | sed -e 's/[\/&]/\\&/g')
ESCAPED_LD_LIBRARY_PATH=$(printf '%s\n' "$DATA_DIR/lib" | sed -e 's/[\/&]/\\&/g')
ESCAPED_BIN_DIR=$(printf '%s\n' "$BIN_DIR" | sed -e 's/[\/&]/\\&/g')

echo "Copying driver binary and scripts to ${BIN_DIR} and ${DATA_DIR}"
cp xrDriver $BIN_DIR
cp xr_driver_cli $BIN_DIR
cp xr_driver_uninstall $BIN_DIR
sed -i -e "s/{bin_dir}/$ESCAPED_BIN_DIR/g" xr_driver_verify
cp xr_driver_verify $BIN_DIR
cp manifest $DATA_DIR

# keep putting this in the old location in case an older version of the script tries to find it
cp xr_driver_uninstall $OLD_BIN_DIR/xreal_driver_uninstall

echo "Copying the udev rules to ${UDEV_RULES_DIR}"
cp udev/* $UDEV_RULES_DIR

echo "Copying the systemd service to ${SYSTEMD_USER_DIR}"
sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" \
  -e "s/{user}/$USER/g" \
  -e "s/{ld_library_path}/$ESCAPED_LD_LIBRARY_PATH/g" \
  -e "s/{bin_dir}/$ESCAPED_BIN_DIR/g" systemd/xr-driver.service
cp systemd/xr-driver.service $SYSTEMD_USER_DIR

# clear bash's cache of executable locations, so it can find the newly installed scripts
hash -r

echo "Setting up the systemd service"
# check if the systemd service is already running from a previous install
systemctl --user is-active --quiet xr-driver && systemctl --user stop xr-driver